#1 1 1 1
#2 2 2 3

#A * Fk

#11	1	2	4	8
#21	1	3	4	9

#110	1	2	4	8
#011	1	2	5	9
#111	1	3	7	15


#1100	1	2	4	8
#0110	1	2	4	9
#0011	1	2	5	12
#1101	1	3	7	15

# borrowed from net
import random
from time import *
import cProfile
 
def zero(m,n):
    # Create zero matrix
    new_matrix = [[0 for row in range(n)] for col in range(m)]
    return new_matrix

def rand(m,n):
    # Create random matrix
    new_matrix = [[random.random() for row in range(n)] for col in range(m)]
    return new_matrix

def randint(m,n,limit):
    # Create random matrix
    new_matrix = [[int(random.random()*limit) for row in range(n)] for col in range(m)]
    return new_matrix

def show(matrix):
    # Print out matrix
    for col in matrix:
        print col 

def mult(matrix1,matrix2):
    # Matrix multiplication
    if len(matrix1[0]) != len(matrix2):
        # Check matrix dimensions
        print 'Matrices must be m*n and n*p to multiply!'
    else:
        # Multiply if correct dimensions
        new_matrix = zero(len(matrix1),len(matrix2[0]))
        for i in range(len(matrix1)):
            for j in range(len(matrix2[0])):
                for k in range(len(matrix2)):
                    new_matrix[i][j] += matrix1[i][k]*matrix2[k][j]
        return new_matrix

def time_mult(matrix1,matrix2):
    # Clock the time matrix multiplication takes
    start = clock()
    new_matrix = mult(matrix1,matrix2)
    end = clock()
    print 'Multiplication took ',end-start,' seconds'

def profile_mult(matrix1,matrix2):
    # A more detailed timing with process information
    # Arguments must be strings for this function
    # eg. profile_mult('a','b')
    cProfile.run('matrix.mult(' + matrix1 + ',' + matrix2 + ')')

# own code from here

import time
import numpy

rep = 2000
target = 10**18
modulo = 20092010

def normmat(a):
	rnum = len(a)
	cnum = len(a[0])
	for r in range(rnum):
		for c in range(cnum):
			a[r][c] %= modulo

def solve(rep, target, modulo):
	f = zero(rep,1)
	a = zero(rep,rep)
	for n in range(rep-1):
		a[n][n] = 1
		a[n][n+1] = 1
		f[n][0] = 1
	f[rep-1][0] = 1
	a[rep-1][0] = 1
	a[rep-1][1] = 1
	a[rep-1][rep-1] = 1
	f = numpy.matrix(f, dtype=numpy.int64)
	a = numpy.matrix(a, dtype=numpy.int64)
	targetex = target / rep
	while targetex > 0:
		if targetex%2==1:
			f = (a * f) % modulo
		t1 = time.time()
		a = (a*a)%modulo
		t2 = time.time()
		print targetex, t2-t1
		targetex /= 2
	return f[target%rep,0]

def solveslow(rep, target, modulo):
	slow = [0] * (target+1)
	for n in range(rep):
		slow[n] = 1
	for n in range(rep,target+1):
		slow[n] = (slow[n-rep] + slow[n-rep+1]) % modulo
	return slow[-1]

rep = 2000
target = 10**18
modulo = 20092010
t1 = time.time()
print solve(2000, 10**18, modulo)
t2 = time.time()
#print solveslow()
print t2-t1
