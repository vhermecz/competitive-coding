from time import *

cache = dict()

def digfrac(k):
	if not cache.has_key(k):
		n=k
		while n > 9:
			t = 0
			while n!=0:
				t += n%10
				n /= 10
			n=t
		cache[k] = n
	return cache[k]

sol = [0] * 1000000

t1 = time()
r = 2
for i in xrange(2,1000000):
	if i==r:
		print i
		r*=2
	sol[i] = max(sol[i], digfrac(i)) # n - int((n-1)/9)*9 
	for j in xrange(1, min(i+1,(1000000+i-1)/i)):
		t = j*i
		sol[t] = max(sol[t], sol[i]+sol[j])

t2=time()
print sum(sol), t2-t1
# 14489159 27.0440001488
# 14489159 18.9930000305 (with digfrac cache)
# 14489159 13.3330001831 (with digfrac being n - int((n-1)/9)*9)
# 14489159 7.06900000572 (with smart digfrac, and additional limit on j)

# tricky
t1 = time()
limit = 100000000
sol = [0] * limit
for i in xrange(2,limit):
	sol[i] = max(sol[i], i - int((i-1)/9)*9)
	for j in xrange(1, min(i+1,(limit+i-1)/i)):
		sol[j*i] = max(sol[j*i], sol[i]+sol[j])

t2=time()
print sum(sol), t2-t1