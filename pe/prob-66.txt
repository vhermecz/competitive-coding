#Dz2(Dz2+2)

#Dz4 + 2Dz2

#x2-1==Dy2
#(x+1)*(x-1)==Dy2
#k=x+1
#k*(k-2)==Dy2

import itertools
def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

primes = primesbelow(10000)

def divisors(n):
	primdivs = []
	for i in primes:
		if n==1: break
		if n%1==0:
			part = [1]
			v = i
			while n%i==0:
				part.append(v)
				n/=i
				v*=i
			primdivs.append(part)
		i+=1
	divs = []
	for comb in itertools.product(*primdivs):
		divs.append(reduce(lambda x,y:x*y, comb))
	return divs

def squareroot(apositiveint):
	root = int(apositiveint**0.5)
	return (root**2==apositiveint, root)

def squareroot(apositiveint):
  if apositiveint<2: return (True, apositiveint)
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return (False, x)
    seen.add(x)
  return (True, x)

def solve(D,limit=10**6,limitfrom=1):
	Ddivs = divisors(D)
	for z in xrange(limitfrom,limit):
		for Ddiv in Ddivs:
			for x in [Ddiv*z**2-1, 2*Ddiv*z**2-1]:
				xside = (x**2-1)
				if xside%D==0:
					y = squareroot(xside/D)
					if y[0] and x**2-D*y[1]**2==1 and y[1]>0:
						return x
	return False

from time import time

t1=time()
Ds = range(1,1000)
for limit in [10**i for i in range(1,7)]:
	Dmiss = []
	for D in Ds:
		if not squareroot(D)[0]:
			res = solve(D, limit, limit/10)
			if not res:
				Dmiss.append(D)
			else:
				print D, res
	Ds = Dmiss
	if len(Ds)==0:
		break
	else:
		print "missing values:", len(Ds), time()-t1, Ds


