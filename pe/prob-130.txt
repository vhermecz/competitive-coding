from time import time
import sys

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def isprime(n):
	if n<=primes[-1]: return n in sprimes
	limit = int(n**0.5)+1
	for p in primes:
		if p>limit: return True
		if n%p==0: return False

plimit = 10**6
primes = primesbelow(plimit)
sprimes = set(primes)

def getlen(i):
	c=n=1
	while n!=0:
		n = (n*10+1)%i
		c+=1
	return c

def solve(limit):
	sols = []
	for i in xrange(7, sys.maxint, 2):
		if i%5!=0 and not isprime(i) and (i-1)%getlen(i)==0:
			sols.append(i)
			if len(sols)==limit:
				return sols

t1=time()
sol = sum(solve(25))
t2=time()
print t2-t1,sol
#cpy  1.26600003242 149253
#pypy 0.262