#A = x2+y2-z2
#B = 2xz
#C = 2yz
#D = x2+y2+z2

2yz / 2xz = y/x
if y % x==0
	A = (x2+y2-z2)/2xz
	B = 2xz / 2xz
	C = 2yz / 2xz = y/x
	D = (x2+y2+z2)/2xz
	

# D is the biggest value
# proof:
#	2xz < x2+z2 < x2+y2+z2
#	0 < x2-2xz+z2
#	0 < (x-y)2
#	if x=z => 2xx==x2+x2
#		y>=1 ==> 2xx<x2+x2+y2


a2+b2=c2-1
a2+b2=x

from time import time
import math

def solve(limit):
	cnt=0
	step=0
	t1=time()
	for c in range(3,limit/2+1,2):
		x = c**2-1
		a = 2
		b = c-1
		delta = 6 - 2 * c # a**2+b**2-x
		while a>b: # sqrt screws up perf
			step+=1
			if delta==0:
				if a+b+c<=limit: cnt+=1
				delta += 4*a + 4
				a+=2
			elif delta<0:
				n = int(math.ceil((a**2 - delta)**0.5))-a
				if (n%2)==1: n+=1
				delta += n*(n+2*a)
				a+=n
				if n==2: break
			elif delta>0:
				delta -= 4*b - 4
				b-=2
		while a<b:
			step+=1
			if delta==0:
				if a+b+c<=limit: cnt+=1
				delta += 4*a + 4
				a+=2
			elif delta<0:
				delta += 4*a + 4
				a+=2
			elif delta>0:
				delta -= 4*b - 4
				b-=2
	t2=time()
	return cnt, step, t2-t1

print cnt, step


# delta for a:
#			-delta = (a+n)**2 - a**2
#			-delta =< 2an + n2
#			0 <= n2 + 2an + delta
#			n >= -a + r(a2 - delta)

# for a,b,c if c is fixed a2+b2 will have max value if a=1 b=limit-c-1
#1 + (limit-c-1)**2 == c**2
#1 + limit**2 +c**2 + 1 + 2c - 2climit - 2limit = c**2
#2 + limit**2 + 2c - 2climit - 2limit = 0
#2c(limit-1) = (limit**2 - 2*limit + 2)
#c = (limit**2 - 2*limit + 2) / (limit - 1) / 2
#c = ((limit - 1)**2 + 1) / (limit-1) / 2
#c = (limit - 1)/2 + 1/2(limit-1)
# if c is over (limit - 1)/2 + 1/2(limit-1) there is no solution
# if c is over (limit - 1)/2 + 1

