def gcd(a,b):
	if b==0: return a
	return gcd(b,a%b)

def repunitmod(repunit_len, modulo):
	rem = 0
	left = repunit_len
	while left >0:
		rem = (rem*10+1)%modulo
		left-=1
	return rem

def repunitlen(modulo):
	rem = 0
	cnt = 0
	while True:
		rem = (rem*10+1)%modulo
		cnt+=1
		if rem==0: break
	return cnt

def repunitmodfast(repunit_len, modulo):
	if modulo==2 or modulo==5: return 1
	rem = 0
	left = repunit_len
	left %= repunitlen(modulo)
	while left >0:
		rem = (rem*10+1)%modulo
		left-=1
	return rem

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

primes = primesbelow(10**5)
from time import *

sol = [2,3,5]
t1=time()
for p in primes[3:]:
	replen = repunitlen(p)
	while replen%2==0: replen/=2
	while replen%5==0: replen/=5
	if replen!=1:
		sol.append(p)

t2=time()
print t2-t1,sum(sol)

solution = 453647705
time = 57sec