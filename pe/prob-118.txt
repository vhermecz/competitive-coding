from itertools import *
from time import time

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def isprime(n):
	if n<=primes[-1]: return n in sprimes
	limit = int(n**0.5)+1
	for p in primes:
		if p>limit: return True
		if n%p==0: return False

primes = primesbelow(10**5)
sprimes = set(primes)

def numberize(ns, f, t):
	r = 0
	while f<t:
		r = r*10+ ns[f]
		f+=1
	return r

def primize(ns):
	def primize_inner(sols, ns, past, lpos, rpos):
		if rpos > len(ns):
			if lpos == len(ns):
				sols.add(tuple(past[:]))
			return
		n = numberize(ns, lpos, rpos)
		if isprime(n):
			past.append(n)
			primize_inner(sols, ns, past, rpos, rpos+1)
			past.pop()
		primize_inner(sols, ns, past, lpos, rpos+1)
	sols = set()
	primize_inner(sols, ns, [], 0, 1)
	return sols

t1=time()
sols = []
for ns in permutations(range(1,10)):
	sols.extend(primize(ns))

sols2 = set([tuple(sorted(sol)) for sol in sols])
t2=time()
print t2-t1, len(sols2)

#33.4210000038 195148