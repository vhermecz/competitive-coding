from time import time

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def solve(limit):
	primes = primesbelow(int(limit**0.5+1000))
	tot = 0
	cnt = 0
	for i in range(len(primes)-1):
		pt = primes[i+1]
		pb = primes[i]
		vs = pb**2+1
		ve = pt**2-1
		while vs<=ve:
			if vs>limit: return cnt, tot
			rb = vs%pb
			rt = vs%pt
			if rb==0 and rt==0:
				vs+= pb
			else:
				if rb*rt==0:
					tot+=vs
					cnt+=1
				vs += min(pb-rb, pt-rt)

t1=time()
sol = solve(999966663333)[1]
t2=time()

print t2-t1,sol
# cpy	7.2539999485  1259187438574927161
# pypy	4.68299984932 1259187438574927161