from time import time
from itertools import *

t1=time()

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def squareroot(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return (False, x)
    seen.add(x)
  return (True, x)

def powerset(iterable):
    "powerset([1,2,3]) --> () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)"
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))

from math import *
from time import time

nlimit = 40 # primes under 190 => 40

primes = primesbelow(1000)
logbase = 10

primes = primes[:nlimit]
total = reduce(lambda a,b:a*b, primes)
sqroot = squareroot(total)[1]

t1=time()
curr = 1
cand = 1
currfact = set([])
while True:
	left = set(primes) - currfact
	found = 0
	print curr, len(currfact), len(left), sqroot-cand, time()-t1
	for rem in powerset(currfact):
		remprod = reduce(lambda a,b:a*b, rem, 1)
#		1<tmp/remprod<sqroot/curr
		sleft = sorted(left)
		tmp=1
		for i in range(len(left)):
			tmp*=sleft[i]
			if tmp<rempord: lower=i
			if tmp>remprod: break
		tmp = reduce(lambda a,b:a*b, left, 1)
		for i in range(len(left)):
			tmp/=sleft[i]
#			if tmp<remprod: break
			if tmp*curr<sqroot*remprod: break
		upper = i
		print remprod, lower, upper, len(left), sorted(rem), sorted(left)
		for add in powerset(left):
			addprod = reduce(lambda a,b:a*b, add, 1)
			cand = curr/remprod*addprod
			if curr < cand < sqroot:
				found=1
				currfact = currfact - set(rem) | set(add)
				curr = cand
				break
		if found:
			break
	if not found:
		break

print curr, time()-t1
