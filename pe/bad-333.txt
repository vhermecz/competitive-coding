def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def solve_inner(p, v23s, idx, past):
	if p==0: return 1
	if idx>=len(v23s): return 0
	r = solve_inner(p, v23s, idx+1, past)
	if p>=v23s[idx] and sum(1 for p in past if p%v23s[idx]==0)==0:
		past.append(v23s[idx])
		r+= solve_inner(p-v23s[idx], v23s, idx+1, past)
		past.pop()
	return r

def solve(limit):
	t1=time()
	primes = primesbelow(limit)
	v23 = set()
	for i2 in range(100):
		p2 = 2**i2
		if p2 >= limit: break
		for i3 in range(100):
			p3 = 3**i3
			p = p2*p3
			if p!=1:
				if p >= limit: break
				v23.add(p)
	v23 = list(reversed(sorted(v23)))
	total = 0
	for p in primes:
		if solve_inner(p, v23, 0, [])==1:
			total+=p
	t2=time()
	print total, t2-t1
	return total

