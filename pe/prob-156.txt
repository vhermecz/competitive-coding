from math import *

def digcntexp(n):
	return n * 10**(n-1)

def f(n,d):
	return digcntfast(n+1,d)

def digcntfast(to, dig):
	lmtlog = int(log(to,10))
	lmt = 10**lmtlog
	cnt = 0
	hcnt = 0
	while lmtlog>=0:
		hdig = to / lmt
		if hdig>0:
			cnt += int(digcntexp(lmtlog)) * hdig
			if dig < hdig:
				cnt += lmt
			cnt += hdig*lmt*hcnt
		to %= lmt
		lmt /= 10
		lmtlog-=1
		if hdig == dig:
			hcnt+=1
	return cnt

def s(d):
	sum=0
	n=0
	while n<10**20:
		r=f(n,d)
		if r==n:
			sum+=n
#			print n
			n+=1
		elif r>n:
			inc = r-n
	#		print "g", inc
			n+=inc
		elif r<n:
			inc = int(ceil(log(n,10)))
			if inc>0:
				inc = (n-r)/inc
	#		print "l", inc
			n+=max(1,inc)
	return sum

from time import *
t1 = time()
solution = sum([s(i) for i in range(1,10)])
t2=time()
print solution, t2-t1

# 21295121502550 2.47800016403

# check
#for d in range(1,10):
#	print d
#	for n in range(1,3000):
#		if digcnt(0,n,d) != digcntfast(n,d):
#			print n,d

# slow
def digcnt(frm, to, dig):
	cnt = 0
	for i in xrange(frm, to):
		while i!=0:
			if dig == i%10: cnt+=1
			i /= 10
	return cnt
