import math
from time import time

def is_prob_prime(possible, k=None):
	def ipow(a,b,n):
		#calculates (a**b)%n via binary exponentiation, yielding itermediate
		#results as Rabin-Miller requires
		A = a = long(a%n)
		yield A
		t = 1L
		while t <= b:
			t <<= 1
		#t = 2**k, and t > b
		t >>= 2
		while t:
			A = (A * A)%n
			if t & b:
				A = (A * a) % n
			yield A
			t >>= 1
	def RabinMillerWitness(test, possible):
		#Using Rabin-Miller witness test, will return True if possible is
		#definitely not prime (composite), False if it may be prime.    
		return 1 not in ipow(test, possible-1, possible)
	smallprimes = (3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97)
	if possible==2: return True
	if possible%2==0: return False
	if possible in smallprimes: return True
#	if k is None: k = int(2*math.log(possible,2))
    #Will generate an integer of b bits that is probably prime.
    #Reasonably fast on current hardware for values of up to around 512 bits.
	for i in smallprimes:
		if possible%i == 0: return False
	else:
#		for i in xrange(k):
#			test = random.randrange(2, possible)|1
		for test in smallprimes[:7]:
			if RabinMillerWitness(test, possible):
				return False
	return True


cnt=0
t1=time()
limit = 50000001
for i in xrange(1,limit):
	if i%100000==0: print i, time()-t1
	if is_prob_prime(2*i**2-1): cnt+=1

t2=time()
print t2-t1,cnt

#3963.93600011 5437851 #bad


#cnt=0
#skipped=0
#candb = []
#acandb = []
#candi = []
#acandi = []
#t1=time()
#for i in xrange(1,1000001,1):
#	if i>100:
#		if i%7%3==2:
#			skipped+=1
#			continue
#	if False:
#		witnessed = False
#		for mod, witnesses in [(7, set([2, 5])),(17, set([3, 14]))]:#,(23, set([9, 14])),(31, set([27, 4])),(41, set([12, 29])),(47, set([27, 20])),(71, set([65, 6])),(73, set([16, 57])),(79, set([35, 44])),(89, set([32, 57])),(97, set([90, 7]))]:
#			if i%mod in witnesses:
#				witnessed=True
#				break
#		if witnessed: continue
#	base = 2*i**2-1
#	if is_prob_prime(base):
#		cnt+=1
#		candb.append(base)
#		candi.append(i)
#	else:
#		acandb.append(base)
#		acandi.append(i)
#
#t2=time()
#print t2-t1
#
#def getmods(cands, mod): return sorted(set(cand%mod for cand in cands))
#
#for c, ac, name in [(candb, acandb, "2i2-1%"), (candi, acandi, "i%")]:
#	for i in (2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97):
#		res = set(getmods(ac,i))-set(getmods(c,i))
#		if len(res)>0:
#			print name, i, res
#
#for i in range(2,100):
#    if len(set(getmods(candb,i))&set(getmods(acandb,i)))==0:
#            print "2i2-1%", i
#
#for i in range(2,100):
#    if len(set(getmods(candi,i))&set(getmods(acandi,i)))==0:
#            print "i%",i
#
#
##21,23
#
#2i2-1% 7 set([0])
#2i2-1% 17 set([0])
#2i2-1% 23 set([0])
#2i2-1% 31 set([0])
#2i2-1% 41 set([0])
#2i2-1% 47 set([0])
#2i2-1% 71 set([0])
#2i2-1% 73 set([0])
#2i2-1% 79 set([0])
#2i2-1% 89 set([0])
#2i2-1% 97 set([0])
#i% 7 set([2, 5])
#i% 17 set([3, 14])
#i% 23 set([9, 14])
#i% 31 set([27, 4])
#i% 41 set([12, 29])
#i% 47 set([27, 20])
#i% 71 set([65, 6])
#i% 73 set([16, 57])
#i% 79 set([35, 44])
#i% 89 set([32, 57])
#i% 97 set([90, 7])
#
##141446