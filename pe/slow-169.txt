def gcd(a,b): return a if b==0 else gcd(b,a%b)

from math import *

def genproblemset(n):
	total = n
	segments = []
	i=1
	while i<=total:
		segments.append(i)
		i*=2
	return (total, list(reversed(segments)))

def getsizeleft(segments):
	sizeleft = [0] * (len(segments)-1) + [2*segments[len(segments)-1]]
	for i in range(len(segments)-2,-1,-1):
		sizeleft[i] = sizeleft[i+1] + 2*segments[i]
	return sizeleft

def solver(n):
	limit, items = genproblemset(n)
	st = [len(items), items, getsizeleft(items), 0]
	def solve(limit, pos):
		if limit==0: return 1
		if limit<0: return 0
		if pos >= st[0]: return 0
		if st[2][pos]<limit: return 0
		return solve(limit, pos+1) + solve(limit-st[1][pos], pos+1) + solve(limit-2*st[1][pos], pos+1)
	cnt = solve(limit, 0)
	return cnt

from time import time
for i in range(1,26):
	t1=time()
	res = solver(10**i)
	t2=time()
	print i,res,t2-t1


def specbinsolver(a,b,c,d): return (1+a*b)*(1+c*d)+a*d


def specbin(a,b,c,d): return '1'*a+'0'*b+'1'*c+'0'*d

for a in range(1,5):
	for b in range(1,5):
		for c in range(1,5):
			for d in range(1,5):
				if solver(int(specbin(a,b,c,d),2)) != specbinsolver(a,b,c,d):
					print a,b,c,d

def toradix(n,radix=2):
	s=""
	while n>0:
		s = "0123456789ABCDEF"[n%radix]+s
		n/=radix
	return s
