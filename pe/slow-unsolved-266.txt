from time import time

t1=time()

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def squareroot(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return (False, x)
    seen.add(x)
  return (True, x)

from math import *
from time import time

nlimit = 25 # primes under 190 => 40

primes = primesbelow(1000)
logbase = 10

total = reduce(lambda a,b:a*b, primes[:nlimit])
sqroot = squareroot(total)[1]

transform = lambda a:a	# float domain
#transform = lambda a:int(100000*a)	# integer domain imprec

items = [transform(log(i, logbase)) for i in primes[:nlimit]]
masks = [1<<i for i in range(nlimit)]

slimit = transform(log(sqroot, logbase))

beststate = 0
bestmask = 0
def solver(state, pos, mask):
	global bestmask
	global beststate
	global masks
	if state>slimit: return
	if state>beststate:
		beststate=state
		bestmask=mask
	if pos==nlimit: return
	solver(state+items[pos], pos+1, mask|masks[pos])
	solver(state, pos+1, mask)

t1=time()
solver(0, 0, 0)
solution = []
for i in range(nlimit):
	if masks[i] & bestmask:
		solution.append(primes[:nlimit][i])

sol = reduce(lambda a,b:a*b, solution)
t2=time()
print t2-t1,sol

