import math
import bisect

def squareroot(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return (False, x)
    seen.add(x)
  return (True, x)

ROUND_DN = 1
ROUND_UP = 2
def squarerootround(n,r):
	a = squareroot(n)
	if a[0]: return a[1]
	if (a[1]**2>n) and (r==ROUND_DN): return a[1]-1
	if (a[1]**2<n) and (r==ROUND_UP): return a[1]+1
	return a[1]

def root(a):
	rt = int(a**0.5)
	if rt**2!=a: return False
	return rt

def Sgood(n,m):
	n,m = sorted([n,m])
	step = n-1 + m-1 -1
	if n==m:
		step+=(2*(n-1)-1)*3+1
	else:
		step += (2*(n-1))*3
		step += 5*(m-n-1)
		step += 1
	return step

def S(n,m):
	if n==m:
		return 8*n-11
	else:
		if n>m: n,m=m,n
		return 2*n+6*m-13

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

limit = 10**6
primes = primesbelow(limit)
sprimes = set(primes)
cnt = 0
diag = []
m=3
while True:
	l = S(2,m)
	h = S(m-1,m)
	lsq = squarerootround(l, ROUND_UP)
	hsq = squarerootround(h, ROUND_DN)
	lpos = bisect.bisect_left(primes,lsq)
	hpos = bisect.bisect_right(primes,hsq)
	if lpos == len(primes): break # no other solutions
	#lstep
	if primes[lpos]**2==l:
		lnext = primes[lpos+1]
	else:
		lnext = primes[lpos]
	step = (lnext**2 - l + 5)/6
	#rstep
	if hpos<len(primes):
		rstep = (primes[hpos]**2 - h + 7)/8
		step = min(step, rstep)
	cnt += 2 * (hpos-lpos) * step
	m += step

cnt -= 2 # somehow there is an additional 2 in the result

cnt = 2057774861813004