from time import time

def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

# bad ugly: counts 1 solution many times, so list is reqed
def solve_ugly(n, limit):
	t1=time()
	sols = []
	def solve_inner(limit, prod, primes, idx):
		if prod>limit: return 0
		if idx==len(primes): return 0
		sols.append(prod)
		return 1 + solve_inner(limit, prod*primes[idx], primes, idx) + solve_inner(limit, prod, primes, idx+1)
	solve_inner(limit, 1, primesbelow(n+1), 0)
	res = len(set(sols))
	t2=time()
	print t2-t1
	return res

def solve(n, limit):
	t1=time()
	def solve_inner(limit, prod, primes, idx, neu):
		if prod>limit: return 0
		if idx==len(primes): return 0
		return neu + solve_inner(limit, prod*primes[idx], primes, idx, 1) + solve_inner(limit, prod, primes, idx+1, 0)
	res = solve_inner(limit, 1, primesbelow(n+1), 0, 1)
	t2=time()
	print t2-t1
	return res

solution = solve(100,10**9)

#2944730 25.327 sec
#2944730 20.07 sec - non ugly version