from fractions import Fraction
 
def gauss_jordan(mat):
	r = len(mat)+1
	c = len(mat[0])+1
	steps = "" 
	#Make everything rational
	mat = map(lambda x: map(lambda y:Fraction(y),x) ,mat)
	def render_matrix(mat):
		mat = map(lambda x: map(lambda y:str(y),x) ,mat)
		return reduce(lambda x,y: str(x)+"\n"+str(y),mat)+"\n\n" 
	#Lower Triangle
	for i in range(1,r):
		for j in range(1,c):
			e = mat[i-1][j-1]
			if i==j and e!=1:
				pivot = e
				if pivot == 0:
					return "Matrix is singular"
				mat[i-1] = map(lambda x: (x/pivot),mat[i-1])
				steps += "Multiplying Row %s by %s\n" % (i,1/pivot)
				steps += render_matrix(mat)
			elif i>j and e!=0:
				scalar = e
				mat[i-1] = [a - b for a, b in zip(mat[i-1],map(lambda x: (x*scalar),mat[j-1]))]
				steps += "Adding %s times Row %s to Row %s\n" % (-scalar,j,i)
				steps += render_matrix(mat)
	#Upper Triangle
	for i in reversed(range(1,r)):
		for j in reversed(range(1,c)):
			e = mat[i-1][j-1]
			if (i<j and j<r) and e!=0:
				scalar = e
				mat[i-1] = [a - b for a, b in zip(mat[i-1],map(lambda x: (x*scalar),mat[j-1]))]
				steps += "Adding %s times Row %s to Row %s\n" % (-scalar,j,i)
				steps += render_matrix(mat)
	return mat


def gen(ps, n):
	return sum(ps[i]*(n**i)  for i in range(len(ps)))

ps = [1,-1,1,-1,1,-1,1,-1,1,-1,1]
uv = [gen(ps, n) for n in range(1,11)]


def approx_params(params, deg):
	s = deg + 1
	mat = [[ i**j for j in range(deg, -1,-1) ] + [gen(params, i)] for i in range(1,s+1)]
	mat = gauss_jordan(mat)
	appr = [line[-1] for line in mat]
	return list(reversed(appr))

def solve(params):
	res = 0
	for deg in range(len(params)-1):
		appr = approx_params(params,deg)
		print appr
		print deg, gen(appr, deg+2)
		res += gen(appr, deg+2)
	return res

print int(solve(ps))
