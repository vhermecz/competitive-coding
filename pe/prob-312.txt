#	C				E				M
#1	1				1				1
#2	1				2**1			3	(special M like only in this case, this artifact introduces 3 into the products)
#3					2**3*3**1		2**2*3**2
#4					2**9*3**4
#5	2**27*3**12

#C(x) = 3*E(x-1)
#E(x) = MEE + EEM = 2*M(x-1)*E(x-1)^2
#M(x) = MME + EMM = 2*M(x-1)^2*E(x-1)

limit = 10001
C=[0]*limit
E=[0]*limit
M=[0]*limit
C[1] = (0,0)
E[1] = (0,0)
M[1] = (0,0)
C[2] = (0,0)
E[2] = (1,0)
M[2] = (0,1)

for i in range(3,limit):
	C[i] = (3*E[i-1][0], 3*E[i-1][1])
	E[i] = (1+2*E[i-1][0]+1*M[i-1][0], 2*E[i-1][1]+1*M[i-1][1])
	M[i] = (1+1*E[i-1][0]+2*M[i-1][0], 1*E[i-1][1]+2*M[i-1][1])

def gC(n):
	if n>=3:
		t = 3**(n-2)
		return (t, (t-3)/2)
	return (0,0)

def gmv(n,m):
	if n>=3:
		return (cheat2(n-2,m)*cheat3(n-2,m))%m
	return 1

def cheat2(n,m):
	b = 2
	while n>0:
		b = pow(b,3,m)
		n-=1
	return b

def cheat3(n,m):
	b = 3
	r = 1
	c = 1
	while c<n:
		b = pow(b,3,m)
		r*=b
		c+=1
	return r



def gSC(n1,n2):
	s1 = gC(n1)
	s2 = gC(n2)
	return (s2[0]-s1[0], s2[1]-s1[1])

def gmodvalue(gc,m):
	t=gc
	r = pow(2,t[0],m)
	r *= pow(3,t[1],m)
	r %= m
	return r

t = gC(10000)
r = pow(2,t[0],13**8)
r *= pow(3,t[1],13**8)
r %= 13**8
print r

def findcycle(m):
	b = gmodvalue(gC(3),m)
	i = 4
	while b != gmv(i,m):
		i+=1
		if i%1000==0: print i
	return i-3

for i in range(1,10000):
	if gmodvalue(gC(i),23452345)!=gmv(i,23452345):
		print i
	
for i in range(3,30):
	print i, gmodvalue(gC(i),10**2)


C(C(C(10 000))) mod 13**8
C(C(10 000)) mod 6*13**6
#---
x[0] = 0
x[1] = 3
x[i] = 3*x[i-1]+3

x[n] = 3^1 + 3^2 + 3^3 + 3^4 ... 3^n

3*x[n] = 3^2 + 3^3 + 3^4 + 3^5 ... 3^n+1
x[n] = (3^n+1 - 3^1)/2