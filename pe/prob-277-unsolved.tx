def mcolcheat(pow, x):
	n = 3**(pow-1)*x
	s = mcol(3**(pow-1)*x)
	print n, s
	return s[pow-1]

def mcol(n):
	if (n==0): return "D"
	if (n==1): return "U"
	r = ""
	while n!=1:
		if n%3==0:
			r += "D"
			n = n/3
		elif n%3==1:
			r += "U"
			n = (4*n+2)/3
		else:
			r += "d"
			n = (2*n-1)/3
	return r

def preparemcolworking(ss):
	p = 1
	pos = 0
	r = 0
	for s in ss:
		for i in range(0,9):
			cand = mcol(r+p*i)
			if len(cand)>pos and cand[pos]==s:
				break
		r = r + p*i
		p*=3
		pos+=1
	return r

def preparemcol2(ss):
	p = 1
	r = 0
	for s in ss:
		if s=="D":
			r += 3*p
		elif s=="U":
			r += 4*p
		else: # s=="d"
			r += 2*p
		p*=3
	return r

def optimize(cand, ss):
	p = 1
	while p<cand:
		for i in range(1,10):
			cand2=cand-p*i
			if cand2>=0 and mcol(cand-p*i)[:len(ss)]==ss:
				cand=cand2
				break
		p*=3
	return cand



def preparemcol(ss):
	r = (1, 0)
	for s in ss:
		if s=="D":
			r = (3*r[0], 1*r[0]+r[1])
		elif s=="U":
			r = (3*r[0], 1*r[0]+r[1])
		else: # s=="d"
			r = (3*r[0], 2*r[0]+r[1])
	return r


target="UDDDUdddDDUDDddDdDddDDUDDdUUDd"
base = preparemcolworking(target)
pow = 3**len(target)
i=0
while base+pow*i<=10**15:
	i+=1

res=base+pow*i

#solution = 1125977393124310L

a % 3



U -> x%3==1			x = 3i
x1 = (4x+2)/3
D -> x1%3==0
x2 = x1/3
	(4x+2)/3%3==0
	(4x+2)%9==0
	4x+2 = 9*i2
					x = (9*i2-2)/4
					9*i2-2 = 4j
					i = (4j+2)/9
					
					x = (9*(2+4*j)-2)/4
					x = 4 + 9j
D -> x2%3==0
	x1 = 18 + 36j / 3
	x1 = 6 + 12j
	x2 = 2 + 4j
	2+4j%3==0
	2+4j = 3*k
bad			j = (3*k-2)/4
god		j = 1+3*k
	x = 4 + 9*((3*k-2)/4)
	x = 4 + 9*((3*k-2)/4)
	
	
	x = 4 + 9*(1+3*k)
	x = 13 + 27*k
