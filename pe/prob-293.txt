from time import time
def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]

def getadmissibles(limit):
	primes = primesbelow(100)
	sols = []
	def inner(prod, pidx,sols):
		if pidx==len(primes): return
		prod*=primes[pidx]
		if prod>limit: return
		sols.append(prod)
		inner(prod,pidx,sols)
		inner(prod,pidx+1,sols)
	inner(1,0,sols)
	return sols

def nextprime(n):
	while True:
		n+=1
		fail = False
		for p in primes:
			if p>=n: break
			if n%p==0:
				fail=True
				break
		if not fail:
			return n

t1=time()
primes = primesbelow(10**5)
sol = sum(set(nextprime(adm+1)-adm for adm in getadmissibles(10**9)))
t2=time()
print t2-t1,sol

#pypy	0.535000085831 2209
#cpy	7.28800010681 2209