def primesbelow(N):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    #""" Input N>=6, Returns a list of primes, 2 <= p < N """
    correction = N % 6 > 1
    N = {0:N, 1:N-1, 2:N+4, 3:N+3, 4:N+2, 5:N+1}[N%6]
    sieve = [True] * (N // 3)
    sieve[0] = False
    for i in range(int(N ** .5) // 3 + 1):
        if sieve[i]:
            k = (3 * i + 1) | 1
            sieve[k*k // 3::2*k] = [False] * ((N//6 - (k*k)//6 - 1)//k + 1)
            sieve[(k*k + 4*k - 2*k*(i%2)) // 3::2*k] = [False] * ((N // 6 - (k*k + 4*k - 2*k*(i%2))//6 - 1) // k + 1)
    return [2, 3] + [(3 * i + 1) | 1 for i in range(1, N//3 - correction) if sieve[i]]


def solve(limit):
	primes = primesbelow(int(limit**0.5))
	lprimes = len(primes)-1
	stack = [0]*10000000
	sidx = 0
	stack[0] = (0,0,1)
	sol = 0
	cnt = 0
	t1=time()
	while sidx>=0:
		if cnt%1000000==0: print cnt, len(stack), time()-t1
		cnt+=1
		pnum,pidx,psprod=stack[sidx]
		psprod_inced = psprod*primes[pidx]**2
		sol += (-1)**(pnum)*(limit/psprod_inced)
		if pidx < lprimes and psprod_inced <= limit :
			stack[sidx] = (pnum, pidx+1, psprod)
#			if psprod_inced <= limit:
			sidx+=1
			stack[sidx] = (pnum+1, pidx+1, psprod_inced)
		else:
			sidx-=1
	return sol

from time import time
t1=time()
sol = 2**50 - solve(2**50)
t2=time()
print t2-t1,sol
#88sec 684465067343069
