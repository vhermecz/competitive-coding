def counter(n, m):
	i = n
	c2 = 0
	while i!=0:
		c2 += i/m
		i/=m
	return c2


def c2a5(n):
	i = n
	c2 = 0
	while i!=0:
		c2 += i/2
		i/=2
	i = n	
	while i!=0:
		c2 -= i/5
		i/=5
	return c2

def powmod(mul, mod, pow):
	ret = 1
	base = mul
	while pow > 0:
		if pow%2 == 1:
			ret*=base
			ret%=mod
		base *= base
		base %= mod
		pow/=2
	return ret

def solve(bign):
	mod = 10**5
	modn = bign/mod
	v = 1
	for i in range(1,mod):
		k = i
		if k!=0:
			while k%2==0: k/=2
			while k%5==0: k/=5
			r = i/k
		else:
			r=1
		ch = getchain2(i, r-1)
		head = reduce(lambda a,b:(a*b)%mod, ch[:modn%r],1)
		tail = reduce(lambda a,b:(a*b)%mod, ch[modn%r:],1)
		full = (head*tail)%mod
		res = powmod(full, mod, modn/r)
		res = (res*head)%mod
		v = (v*res)%mod
	c2 = c2a5(bign)
	c2 = powmod(2, mod, c2)
	v = (c2*v)%mod
	return v

def text():
	bad = []
	for i in range(1,10**5):
		k = i
		while k%2==0: k/=2
		while k%5==0: k/=5
		r = i/k
		ch = getchain2(i, r*2-1)
		if ch[:r] != ch[r:]:
			bad.append(i)
	return bad

def getchain3(j,l):
	i = j
	k = i
	while k%2==0: k/=2
	while k%5==0: k/=5
	r = i/k
	cnt =0
	vs = []
	while True:
		k = i/r
		k %= 10**5
		vs.append(k)
		if cnt==l:
			break
		i+=10**5
		cnt+=1
	return vs

def getchain2(j,l):
	i = j
	cnt =0
	vs = []
	while True:
		k = i
		if k!=0:
			while k%2==0: k/=2
			while k%5==0: k/=5
		k %= 10**5
		vs.append(k)
		if cnt==l:
			break
		i+=10**5
		cnt+=1
	return vs

def getchain(j):
	i = j
	vs = []
	vs.append(i)
	while True:
		k = i
		if k!=0:
			while k%2==0: k/=2
			while k%5==0: k/=5
		k %= 10**5
		if k in vs:
			vs.append(k)
			break
		vs.append(k)
		i+=10**5
	repstart = vs.index(vs[-1])
	bootstrap = vs[:repstart]
	repeat = vs[repstart:-1]
	return (bootstrap, repeat)

s = []
for j in range(0,10**5):
	vs = getchain(j)
	s.append(vs)

def gcd(a,b): return a if b==0 else gcd(b,a%b)

def lcm(a,b): return a*b/gcd(a,b)

a = getchain(52550)
repstart = a.index(a[-1])
bootstrap = a[:repstart]
repeat = a[repstart:-1]
