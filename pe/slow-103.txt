from itertools import *

def testset(items):
	last_max = -1
	for inum in range(1,len(items)+1):
		curr_sums = [sum(s) for s in combinations(items, inum)]
		curr_sums_set = set(curr_sums)
		if len(curr_sums_set)!=len(curr_sums):
			return False
		if last_max >= min(curr_sums):
			return False
		last_max = max(curr_sums)
	return True

cache = dict()
def genpartitions(sum, item):
	if sum==0 or item==0: return []
	if item==1: return [[sum]]
	key = (sum, item)
	if cache.has_key(key):
		return cache[key]
	res = []
	for i in range(1,sum):
		tmp = genpartitions(sum-i,item-1)
		for el in tmp:
			if el[-1] < i:
				n = el + [i]
				if testset(n):
					res.append(n)
	cache[key]=res
	return res

from time import *
t1=time()
for i in range(7,10):
	found = False
	for s in range(252,500):
		print s
		for p in genpartitions(s, i):
			found=True
			break
		if found:
			break
	if found:
		print i, p

t2=time()
print t2-t1

# n = 1:	1	{1}
# n = 2:	3	{1, 2}
# n = 3:	9	{2, 3, 4}
# n = 4:	21	{3, 5, 6, 7}
# n = 5:	51	{6, 9, 11, 12, 13}
# n = 6:	115	{11, 18, 19, 20, 22, 25}
# n = 7:	255	{20, 31, 38, 39, 40, 42, 45}		#sol
# [1, 3, 9, 21, 51, 115]
-1 -2 -4 -5